(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["debug_tracker_vscode"] = factory();
	else
		root["debug_tracker_vscode"] = factory();
})(global, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ([
/* 0 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1);
tslib_1.__exportStar(__webpack_require__(2), exports);
tslib_1.__exportStar(__webpack_require__(4), exports);


/***/ }),
/* 1 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__values": () => (/* binding */ __values)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),
/* 2 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DebugTracker = exports.OtherDebugEvents = exports.DebugSessionStatus = exports.TRACKER_EXT_ID = void 0;
const tslib_1 = __webpack_require__(1);
/* eslint-disable @typescript-eslint/no-unused-vars */
const vscode = tslib_1.__importStar(__webpack_require__(3));
const debug_tracker_1 = __webpack_require__(4);
exports.TRACKER_EXT_ID = 'mcu-debug.debug-tracker-vscode';
/** Current status of a session. Will be used for a status change event as well */
var DebugSessionStatus;
(function (DebugSessionStatus) {
    DebugSessionStatus["Unknown"] = "unknown";
    /**
     * There are things that occur before the session starts that we need to know sometimes.
     * vscode.debug.onDidStartDebugSession triggers much later. `Initializing` will start from
     * the 'initialize' request which might be important to know the adapters capabilities.
     *
     * For instance, capabilities can be monitored during the initializing stage.
     */
    DebugSessionStatus["Initializing"] = "initializing";
    /**
     * This is when vscode.debug.onDidStartDebugSession was called. One should assume at the start
     * the program is busy or running so avoid making requests until you get to a stopped state
     * It depends on the debug-adapter
     */
    DebugSessionStatus["Started"] = "started";
    /**
     * When a program officially stopped for any reason. Note that you can get a `Stopped` event immediately followed
     * by a continue/running state. This can happen many different ways. Manipulating breakpoints while program is
     * running for instance. or the user aggressively single stepping.
     *
     * It is a good idea to debounce this event
     */
    DebugSessionStatus["Stopped"] = "stopped";
    /**
     * We can enter Running state in many ways. resume, stepIn, stepOut, etc.
     */
    DebugSessionStatus["Running"] = "running";
    /**
     * This can happen when vscode.debug.onDidTerminateDebugSession is called. But this may never
     * be called if it did not even get to the `Started` stage. So, even the session did not actually
     * start we try to monitor for failure to start and synthesize a Terminated event for you.
     */
    DebugSessionStatus["Terminated"] = "terminated";
})(DebugSessionStatus = exports.DebugSessionStatus || (exports.DebugSessionStatus = {}));
/** Other miscellaneous events that are not status change */
var OtherDebugEvents;
(function (OtherDebugEvents) {
    /**
     * We don't try to figure this out. We generate this event if another client makes a stackTrace
     * request after a pause. Generally, VSCode is the one who queries the stackTrace. We piggy back
     * on that instead of generating another request.
     * If this does not suite your needs, then you can always generate your own requests. Remember to
     * save the current threadId from the Stopped event
     */
    OtherDebugEvents["FirstStackTrace"] = "first-stack-trace";
    /**
     * Get a notification for capabilities. You can get that as a result of the Initialize request
     * or at random times. Of all the protocol events, this is separated out as a special event
     */
    OtherDebugEvents["Capabilities"] = "capabilities";
    /**
     * ProtocolEvent means an event occurred that is specified by Debug Adapter Protocol
     * This is except for the RESUMED (continued), STOPPED and CAPABILITIES events which we already
     * special/specific events that can occur in various ways (not just by an DA created event)
     */
    OtherDebugEvents["ProtocolEvent"] = "protocol-event";
})(OtherDebugEvents = exports.OtherDebugEvents || (exports.OtherDebugEvents = {}));
class DebugTracker {
    constructor(context, dbgChannel, dbgLevel) {
        this.context = context;
        this.tracker = debug_tracker_1.DebugTrackerFactory.register(context, dbgChannel, dbgLevel);
    }
    subscribe(arg) {
        if (arg.version !== 1) {
            return `Unknown version ${arg.version} for debug-tracker`;
        }
        return this.tracker.subscribe(arg);
    }
    unsubscribe(clientId) {
        this.tracker.unsubscribe(clientId);
    }
    getSessionStatus(sessionId) {
        return this.tracker.getSessionStatus(sessionId);
    }
    getSessionInfo(sessionId) {
        return this.tracker.getSessionInfo(sessionId);
    }
    setDbgChannel(dbgChannel, dbgLevel) {
        debug_tracker_1.DebugTrackerFactory.dbgChannel = dbgChannel;
        debug_tracker_1.DebugTrackerFactory.dbgLevel = dbgLevel;
    }
    static getTrackerExtension(callerExtName, maxTimeout = 10 * 1000) {
        let trackerApi;
        // eslint-disable-next-line no-async-promise-executor
        return new Promise(async (resolve) => {
            let trackerExt = vscode.extensions.getExtension(exports.TRACKER_EXT_ID);
            const activate = () => {
                if (trackerExt) {
                    trackerExt.activate().then((api) => {
                        trackerApi = api;
                        resolve(api);
                    }), (e) => {
                        resolve(new Error(`Activation of extension ${exports.TRACKER_EXT_ID} failed: ${e}`));
                    };
                }
                else {
                    resolve(new Error('Internal Error: invalid call to activate'));
                }
            };
            if (!trackerExt) {
                const installStr = `Install ${exports.TRACKER_EXT_ID}`;
                const doInstall = await vscode.window.showErrorMessage(`${callerExtName} requires extension '${exports.TRACKER_EXT_ID}' to be installed. Do you want to install '${exports.TRACKER_EXT_ID}'`, installStr, 'Cancel');
                if (doInstall === installStr) {
                    await vscode.commands.executeCommand('workbench.extensions.installExtension', exports.TRACKER_EXT_ID);
                    trackerExt = vscode.extensions.getExtension(exports.TRACKER_EXT_ID);
                    while (!trackerExt) {
                        if (trackerApi) {
                            break;
                        }
                        if (maxTimeout <= 0) {
                            resolve(new Error(`Install of extension ${exports.TRACKER_EXT_ID} timed out`));
                            return;
                        }
                        const waitTime = 500;
                        await new Promise((res) => {
                            setTimeout(() => {
                                maxTimeout -= waitTime;
                                res();
                            }, waitTime);
                        });
                        trackerExt = vscode.extensions.getExtension(exports.TRACKER_EXT_ID);
                    }
                    activate();
                }
                else {
                    resolve(new Error(`Install of extension ${exports.TRACKER_EXT_ID} cancelled`));
                    return;
                }
            }
            else {
                activate();
            }
        });
    }
}
exports.DebugTracker = DebugTracker;


/***/ }),
/* 3 */
/***/ ((module) => {

module.exports = require("vscode");

/***/ }),
/* 4 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DebugTrackerFactory = exports.DebuggerTracker = void 0;
const tslib_1 = __webpack_require__(1);
const vscode = tslib_1.__importStar(__webpack_require__(3));
const exports_1 = __webpack_require__(2);
class ClientInfo {
    constructor(clientId, handler) {
        this.clientId = clientId;
        this.handler = handler;
    }
}
let ExtensionName = 'unknown extension name';
const DebugClients = {};
const DebugEventClients = {};
const AllSessionsById = {};
class DebuggerTracker {
    constructor(session) {
        this.session = session;
        this.isTerminated = false;
        this.status = exports_1.DebugSessionStatus.Unknown;
        AllSessionsById[session.id] = this;
        DebuggerTracker.setStatus(session, exports_1.DebugSessionStatus.Initializing);
    }
    static getSessionById(id) {
        return AllSessionsById[id];
    }
    onDidSendMessage(msg) {
        if (this.isTerminated)
            return;
        if (DebugTrackerFactory.dbgLevel > 1) {
            appendMsgToDbgChannel('--> ', msg);
        }
        const message = msg;
        if (!message) {
            return;
        }
        switch (message.type) {
            case 'event': {
                const ev = message;
                if (ev) {
                    if (ev.event === 'stopped') {
                        this.fistStackTrace = undefined;
                        DebuggerTracker.setStatus(this.session, exports_1.DebugSessionStatus.Stopped, ev);
                        return;
                    }
                    else if (ev.event === 'continued') {
                        // A debug adapter does not have to issue a continued event
                        DebuggerTracker.setStatus(this.session, exports_1.DebugSessionStatus.Running);
                        return;
                    }
                    else if (ev.event === 'capabilities') {
                        const capabilities = ev.body?.capabilities;
                        if (capabilities) {
                            DebuggerTracker.sendCapabilities(this.session, capabilities);
                        }
                        return;
                    }
                }
                const arg = {
                    clientId: '',
                    event: exports_1.OtherDebugEvents.ProtocolEvent,
                    sessionId: this.session.id,
                    protocolEvent: ev
                };
                DebuggerTracker.notifyEventClients(this.session.type, arg);
                break;
            }
            case 'response': {
                const rsp = message;
                if (rsp) {
                    if (!rsp.success && (['initialize', 'launch', 'attach'].find((v) => v === rsp.command))) {
                        // If one of these fail, then there the session may not have actually started and we don't get
                        // the global sessionStarted and sessionTerminated events at all
                        this.terminate();
                        break;
                    }
                    const continueCommands = ['continue', 'reverseContinue', 'step', 'stepIn', 'stepOut', 'stepBack', 'next', 'goto'];
                    // We don't actually do anything when the session is paused. We wait until someone (VSCode) makes
                    // a stack trace request and we get the frameId from there. Any one will do. Either this or we
                    // have to make our requests for threads, scopes, stackTrace, etc. Unnecessary traffic and work
                    // for the adapter. Downside is if no stackTrace is requested by someone else, then we don't do anything
                    // but then who is the main client for the adapter?
                    if (rsp.success && rsp.command === 'stackTrace') {
                        if (rsp.body?.stackFrames &&
                            rsp.body.stackFrames.length > 0 &&
                            this.fistStackTrace === undefined) {
                            this.fistStackTrace = rsp;
                            DebuggerTracker.sendFirstStackTrace(this.session, this.fistStackTrace);
                        }
                    }
                    else if (rsp.success && continueCommands.includes(rsp.command)) {
                        DebuggerTracker.setStatus(this.session, exports_1.DebugSessionStatus.Running);
                    }
                    else if (rsp.command === 'initialize') {
                        const capabilities = rsp.body;
                        if (capabilities) {
                            DebuggerTracker.sendCapabilities(this.session, capabilities);
                        }
                    }
                }
                break;
            }
            default: {
                // console.log('Unhandled Message type ' + message.type);
                break;
            }
        }
    }
    onWillReceiveMessage(msg) {
        if (DebugTrackerFactory.dbgLevel > 1) {
            appendMsgToDbgChannel('<-- ', msg);
        }
        if (this.isTerminated)
            return;
    }
    static trackAllSessions() {
        const ret = [
            vscode.debug.onDidStartDebugSession((s) => {
                // A session is truly not running until we get the first this event.
                // May never happen
                DebuggerTracker.setStatus(s, exports_1.DebugSessionStatus.Started);
            }),
            vscode.debug.onDidTerminateDebugSession((s) => {
                const tracker = AllSessionsById[s.id];
                if (tracker) {
                    tracker.terminate();
                }
            })
        ];
        return ret;
    }
    terminate() {
        if (!this.isTerminated) {
            this.isTerminated = true;
            DebuggerTracker.setStatus(this.session, exports_1.DebugSessionStatus.Terminated);
            delete AllSessionsById[this.session.id];
        }
    }
    static notifyClientsGeneric(arg, clients) {
        for (const client of clients) {
            const tmp = { ...arg, clientId: client.clientId };
            try {
                client.handler(tmp).catch((e) => {
                    console.error(`debug-tracer: Client handler threw an exception, ${e}`, tmp);
                });
            }
            catch (e) {
                console.error(`debug-tracer: Could not run client handler, ${e}`, tmp);
            }
        }
    }
    static notifyClients(daName, arg) {
        const wildOnes = DebugClients['*'] || [];
        const thisOne = DebugClients[daName] || [];
        const all = wildOnes.concat(thisOne);
        DebuggerTracker.notifyClientsGeneric(arg, all);
    }
    static notifyEventClients(daName, arg) {
        const wildOnes = DebugEventClients['*'] || [];
        const thisOne = DebugEventClients[daName] || [];
        const all = wildOnes.concat(thisOne);
        DebuggerTracker.notifyClientsGeneric(arg, all);
    }
    static setStatus(s, status, optArg) {
        if (DebugTrackerFactory.dbgLevel) {
            const str = `${ExtensionName}: Session '${s.type}:${s.name}': Status '${status}', id = ${s.id}`;
            appendMsgToDbgChannel(str, undefined);
        }
        const tracker = AllSessionsById[s.id];
        if (tracker && (tracker.status !== status)) {
            tracker.status = status;
            const arg = {
                clientId: '',
                event: status,
                sessionId: s.id
            };
            if (status === exports_1.DebugSessionStatus.Initializing) {
                arg.session = s;
            }
            else if (status === exports_1.DebugSessionStatus.Stopped) {
                arg.stoppedEvent = optArg;
            }
            this.notifyClients(s.type, arg);
        }
    }
    static sendCapabilities(s, capabilities) {
        if (DebugTrackerFactory.dbgLevel) {
            const str = `${ExtensionName}: Session '${s.type}:${s.name}': event '${exports_1.OtherDebugEvents.Capabilities}', id = ${s.id}`;
            appendMsgToDbgChannel(str, undefined);
        }
        const arg = {
            clientId: '',
            event: exports_1.OtherDebugEvents.Capabilities,
            sessionId: s.id,
            capabilities: capabilities
        };
        this.notifyClients(s.type, arg);
    }
    static sendFirstStackTrace(s, response) {
        if (DebugTrackerFactory.dbgLevel) {
            const str = `${ExtensionName}: Session '${s.type}:${s.name}': event '${exports_1.OtherDebugEvents.FirstStackTrace}', id = ${s.id}`;
            appendMsgToDbgChannel(str, undefined);
        }
        const arg = {
            clientId: '',
            event: exports_1.OtherDebugEvents.FirstStackTrace,
            sessionId: s.id,
            stackTrace: response
        };
        this.notifyClients(s.type, arg);
    }
    notifyCurrentStatus(clientId) {
        const arg = {
            clientId: clientId,
            event: this.status,
            sessionId: this.session.id,
            session: this.session
        };
        DebuggerTracker.notifyClients(this.session.type, arg);
    }
}
exports.DebuggerTracker = DebuggerTracker;
class DebugTrackerFactory {
    constructor() {
        DebugTrackerFactory.context.subscriptions.push(...DebuggerTracker.trackAllSessions(), vscode.workspace.onDidChangeConfiguration(this.settingsChanged.bind(this)), vscode.debug.registerDebugAdapterTrackerFactory('*', this));
    }
    static register(cxt, dbgChannel, dbgLevel) {
        if (dbgChannel) {
            DebugTrackerFactory.dbgChannel = dbgChannel;
        }
        if (dbgLevel !== undefined) {
            DebugTrackerFactory.dbgLevel = dbgLevel;
        }
        DebugTrackerFactory.context = cxt;
        const elements = cxt.extensionUri.path.split(/[\\/]+/);
        ExtensionName = elements.pop() || cxt.extensionUri.path;
        return new DebugTrackerFactory();
    }
    settingsChanged(e) {
        console.log(e);
    }
    createDebugAdapterTracker(session) {
        return new DebuggerTracker(session);
    }
    static getNonce() {
        let text = '';
        const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        for (let i = 0; i < 32; i++) {
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        return text;
    }
    subscribe(arg) {
        const nonce = DebugTrackerFactory.getNonce();
        const item = new ClientInfo(nonce, arg.body.handler);
        const add = (daName) => {
            let existing = DebugClients[daName];
            if (existing) {
                existing.push(item);
            }
            else {
                DebugClients[daName] = [item];
            }
            if (arg.body.wantCurrentStatus) {
                // We don't want to notify before subscribe returns. Generate events if any
                // asynchronously
                setImmediate(() => {
                    for (const [_id, tracker] of Object.entries(AllSessionsById)) {
                        tracker.notifyCurrentStatus(nonce);
                        if ((daName === '*') || (daName === tracker.session.type)) {
                            tracker.notifyCurrentStatus(nonce);
                        }
                    }
                });
            }
            if (arg.body.notifyAllEvents) {
                existing = DebugEventClients[daName];
                if (existing) {
                    existing.push(item);
                }
                else {
                    DebugEventClients[daName] = [item];
                }
            }
        };
        if (!arg.body) {
            return 'Body field missing for debug-tracker subscribe()';
        }
        else if (!arg.body.debuggers) {
            return 'No debuggers specified in debug-tracker subscribe()';
        }
        else if (!arg.body.handler) {
            return 'No handler specified in debug-tracker subscribe()';
        }
        else if (typeof arg.body.handler !== 'function') {
            return 'Invalid handler, must be a function in debug-tracker subscribe()';
        }
        else if (arg.body.debuggers === '*') {
            add('*');
        }
        else {
            for (const daName of arg.body.debuggers) {
                add(daName);
            }
        }
        if ((arg.body.debugLevel !== undefined) && (arg.body.debugLevel > DebugTrackerFactory.dbgLevel)) {
            DebugTrackerFactory.dbgLevel = arg.body.debugLevel;
        }
        const tmp = {
            clientId: nonce
        };
        return tmp;
    }
    unsubscribe(clientId) {
        for (const item of [DebugClients, DebugEventClients]) {
            for (const daName of Object.getOwnPropertyNames(item)) {
                const clientInfo = item[daName];
                item[daName] = clientInfo.filter((v) => v.clientId !== clientId);
                if (item[daName].length === 0) {
                    delete item[daName];
                }
            }
        }
    }
    getSessionStatus(sessionId) {
        const session = DebuggerTracker.getSessionById(sessionId);
        if (!session) {
            return exports_1.DebugSessionStatus.Unknown;
        }
        return session.status;
    }
    getSessionInfo(sessionId) {
        const session = DebuggerTracker.getSessionById(sessionId);
        if (!session) {
            return undefined;
        }
        const ret = {
            session: session.session,
            status: session.status
        };
        return ret;
    }
}
exports.DebugTrackerFactory = DebugTrackerFactory;
DebugTrackerFactory.dbgLevel = 0;
function appendMsgToDbgChannel(str, obj) {
    if (DebugTrackerFactory.dbgChannel && (DebugTrackerFactory.dbgLevel > 0)) {
        str += obj ? JSON.stringify(obj) : '';
        try {
            DebugTrackerFactory.dbgChannel.appendLine(str);
        }
        catch (e) {
            console.error(e ? e.toString() : 'unknown exception?');
        }
    }
}


/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__(0);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});